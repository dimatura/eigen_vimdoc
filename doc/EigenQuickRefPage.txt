*EigenQuickRefPage.txt*    For Vim 0.0    Last change: 2011 May 18

Eigen Quick Reference Page~

================================================================================
*eigen-headers*
Modules and Header files~

   The Eigen library is divided in a Core module and several additional
   modules. Each module has a corresponding header file which has to be
   included in order to use the module. The Dense and Eigen header files are
   provided to conveniently gain access to several modules at once.

   Module      Header file                   Contents                         
                                             Matrix and Array classes, basic  
   Core         #include <Eigen/Core>        linear algebra (including        
                                             triangular and selfadjoint       
                                             products), array manipulation    
                                             Transform, Translation, Scaling, 
   Geometry     #include <Eigen/Geometry>    Rotation2D and 3D rotations      
                                             (Quaternion, AngleAxis)          
                                             Inverse, determinant, LU         
   LU           #include <Eigen/LU>          decompositions with solver       
                                             (FullPivLU, PartialPivLU)        
   Cholesky     #include <Eigen/Cholesky>    LLT and LDLT Cholesky            
                                             factorization with solver        
                                             Householder transformations;     
   Householder  #include <Eigen/Householder> this module is used by several   
                                             linear algebra modules           
   SVD          #include <Eigen/SVD>         SVD decomposition with           
                                             least-squares solver (JacobiSVD) 
                                             QR decomposition with solver     
   QR           #include <Eigen/QR>          (HouseholderQR,                  
                                             ColPivHouseholderQR,             
                                             FullPivHouseholderQR)            
                                             Eigenvalue, eigenvector          
   Eigenvalues  #include <Eigen/Eigenvalues> decompositions (EigenSolver,     
                                             SelfAdjointEigenSolver,          
                                             ComplexEigenSolver)              
                                             Sparse matrix storage and        
                                             related basic linear algebra     
   Sparse       #include <Eigen/Sparse>      (SparseMatrix,                   
                                             DynamicSparseMatrix,             
                                             SparseVector)                    
                                             Includes Core, Geometry, LU,     
                #include <Eigen/Dense>       Cholesky, SVD, QR, and           
                                             Eigenvalues header files         
                #include <Eigen/Eigen>       Includes Dense and Sparse header 
                                             files (the whole Eigen library)  

================================================================================
*eigen-types*
Array, matrix and vector types~

Recall: Eigen provides two kinds of dense objects: mathematical matrices
and vectors which are both represented by the template class Matrix, and
general 1D and 2D arrays represented by the template class Array >

 typedef Matrix<Scalar, RowsAtCompileTime, ColsAtCompileTime, Options> MyMatrixType;
 typedef Array<Scalar, RowsAtCompileTime, ColsAtCompileTime, Options> MyArrayType;

- Scalar is the scalar type of the coefficients (e.g., float, double,
  bool, int, etc.).
- RowsAtCompileTime and ColsAtCompileTime are the number of rows and
  columns of the matrix as known at compile-time or Dynamic.
- Options can be ColMajor or RowMajor, default is ColMajor. (see class
  Matrix for more options)

All combinations are allowed: you can have a matrix with a fixed number of
rows and a dynamic number of columns, etc. The following are all valid: >

 Matrix<double, 6, Dynamic>                  // Dynamic number of columns (heap allocation)
 Matrix<double, Dynamic, 2>                  // Dynamic number of rows (heap allocation)
 Matrix<double, Dynamic, Dynamic, RowMajor>  // Fully dynamic, row major (heap allocation)
 Matrix<double, 13, 3>                       // Fully fixed (static allocation)

In most cases, you can simply use one of the convenience typedefs for
matrices and arrays. Some examples >

 Matrices                                          Arrays                                           
 Matrix<float,Dynamic,Dynamic>   <=>   MatrixXf    Array<float,Dynamic,Dynamic>    <=>   ArrayXXf   
 Matrix<double,Dynamic,1>        <=>   VectorXd    Array<double,Dynamic,1>         <=>   ArrayXd    
 Matrix<int,1,Dynamic>           <=>   RowVectorXi Array<int,1,Dynamic>            <=>   RowArrayXi 
 Matrix<float,3,3>               <=>   Matrix3f    Array<float,3,3>                <=>   Array33f   
 Matrix<float,4,1>               <=>   Vector4f    Array<float,4,1>                <=>   Array4f    

================================================================================
*eigen-conversion*
Conversion between the matrix and array worlds: ~
>

 Array44f a1, a1;
 Matrix4f m1, m2;
 m1 = a1 * a2;                     // coeffwise product, implicit conversion from array to matrix.
 a1 = m1 * m2;                     // matrix product, implicit conversion from matrix to array.
 a2 = a1 + m1.array();             // mixing array and matrix is forbidden
 m2 = a1.matrix() + m1;            // and explicit conversion is required.
 ArrayWrapper<Matrix4f> m1a(m1);   // m1a is an alias for m1.array(), they share the same coefficients
 MatrixWrapper<Array44f> a1m(a1);

   In the rest of this document we will use the following symbols to
   emphasize the features which are specifics to a given kind of object:
                
      linear algebra matrix and vector only
      array objects only
                
================================================================================
*eigen-basic*   
Basic matrix manipulation~


                 1D objects                          2D objects                                    Notes           
                +-----------------------------------+---------------------------------------------+---------------+
                |Vector4d  v4;                      |Matrix4f  m1;                                |               |
                |Vector2f  v1(x, y);                |                                             |By default,    |
                |Array3i   v2(x, y, z);             |                                             |the            |
 Constructors   |Vector4d  v3(x, y, z, w);          |                                             |coefficients   |
                +-----------------------------------+---------------------------------------------+are left       |
                |VectorXf  v5; // empty object      |MatrixXf  m5; // empty object                |uninitialized  |
                |ArrayXf   v6(size);                |MatrixXf  m6(nb_rows, nb_columns);           +---------------+
                |                                   |                                             |               |
 Comma          |Vector3f  v1;     v1 << x, y, z;   |Matrix3f  m1;   m1 << 1, 2, 3,               |               |
 initializer    |ArrayXf   v2(4);  v2 << 1, 2, 3, 4;|                      4, 5, 6,               |               |
                |                                   |                      7, 8, 9;               |               |
                +-----------------------------------+---------------------------------------------+               |
                |int rows=5, cols=5;                                                              |output:        |
                |MatrixXf m(rows,cols);                                                           |               |
 Comma          |m << (Matrix3f() << 1, 2, 3, 4, 5, 6, 7, 8, 9).finished(),                       |1 2 3 0 0      |
 initializer    |     MatrixXf::Zero(3,cols-3),                                                   |4 5 6 0 0      |
 (bis)          |     MatrixXf::Zero(rows-3,3),                                                   |7 8 9 0 0      |
                |     MatrixXf::Identity(rows-3,cols-3);                                          |0 0 0 1 0      |
                |cout << m;                                                                       |0 0 0 0 1      |
                +-----------------------------------+-----------------------+---------------------+---------------+
                |vector.size();                     |matrix.rows();         |matrix.cols();       |Inner/Outer_   |
 Runtime info   |                                   |matrix.innerSize();    |matrix.outerSize();  |are storage    |
                |vector.innerStride();              |matrix.innerStride();  |matrix.outerStride();|order          |
                |vector.data();                     |matrix.data();         |                     |dependent      |
                +-----------------------------------+-----------------------+---------------------+---------------+
 Compile-time   |ObjectType::Scalar              ObjectType::RowsAtCompileTime                                    |
 info           |ObjectType::RealScalar          ObjectType::ColsAtCompileTime                                    |
                |ObjectType::Index               ObjectType::SizeAtCompileTime                                    |
                +-----------------------------------+---------------------------------------------+---------------+
                |                                   |                                             |no-op if the   |
                |                                   |                                             |new sizes      |
                |vector.resize(size);               |matrix.resize(nb_rows, nb_cols);             |match,         |
                |                                   |matrix.resize(Eigen::NoChange, nb_cols);     |otherwise data |
 Resizing       |                                   |matrix.resize(nb_rows, Eigen::NoChange);     |are lost       |
                |vector.resizeLike(other_vector);   |matrix.resizeLike(other_matrix);             |               |
                |vector.conservativeResize(size);   |matrix.conservativeResize(nb_rows, nb_cols); |resizing with  |
                |                                   |                                             |data           |
                |                                   |                                             |preservation   |
                +-----------------------------------+---------------------------------------------+---------------+
                |vector(i)     vector.x()           |                                             |Range checking |
 Coeff access   |vector[i]     vector.y()           |                                             |is disabled if |
 with           |              vector.z()           |matrix(i,j)                                  |NDEBUG or      |
 range checking |              vector.w()           |                                             |EIGEN_NO_DEBUG |
                |                                   |                                             |is defined     |
                +-----------------------------------+---------------------------------------------+               |
 Coeff access   |vector.coeff(i)                    |matrix.coeff(i,j)                            |               |
 without        |vector.coeffRef(i)                 |matrix.coeffRef(i,j)                         |               |
 range checking |                                   |                                             |               |
                +-----------------------------------+---------------------------------------------+---------------+
                |                                                                                 |the            |
                |object = expression;                                                             |destination is |
 Assignment/copy|object_of_float = expression_of_double.cast<float>();                            |automatically  |
                |                                                                                 |resized (if    |
                |                                                                                 |possible)      |
                +---------------------------------------------------------------------------------+---------------+


================================================================================
*eigen-predefined*                                                                                                            
Predefined Matrices~


 Fixed-size matrix or vector              Dynamic-size matrix                         Dynamic-size vector                        |
 ----------------------------------------+-------------------------------------------+-------------------------------------------+
 typedef {Matrix3f|Array33f} FixedXD;    |typedef {MatrixXf|ArrayXXf} Dynamic2D;     |typedef {VectorXf|ArrayXf} Dynamic1D;      |
 FixedXD x;                              |Dynamic2D x;                               |Dynamic1D x;                               |
                                         |                                           |                                           |
 x = FixedXD::Zero();                    |x = Dynamic2D::Zero(rows, cols);           |x = Dynamic1D::Zero(size);                 |
 x = FixedXD::Ones();                    |x = Dynamic2D::Ones(rows, cols);           |x = Dynamic1D::Ones(size);                 |
 x = FixedXD::Constant(value);           |x = Dynamic2D::Constant(rows, cols, value);|x = Dynamic1D::Constant(size, value);      |
 x = FixedXD::Random();                  |x = Dynamic2D::Random(rows, cols);         |x = Dynamic1D::Random(size);               |
 x = FixedXD::LinSpaced(size, low, high);|N/A                                        |x = Dynamic1D::LinSpaced(size, low, high); |
                                         |                                           |                                           |
 x.setZero();                            |x.setZero(rows, cols);                     |x.setZero(size);                           |
 x.setOnes();                            |x.setOnes(rows, cols);                     |x.setOnes(size);                           |
 x.setConstant(value);                   |x.setConstant(rows, cols, value);          |x.setConstant(size, value);                |
 x.setRandom();                          |x.setRandom(rows, cols);                   |x.setRandom(size);                         |
 x.setLinSpaced(size, low, high);        |N/A                                        |x.setLinSpaced(size, low, high);           |
 ----------------------------------------+-------------------------------------------+-------------------------------------------+
 Identity and basis vectors _            |                                           |                                           |
 ----------------------------------------+-------------------------------------------+-------------------------------------------+
 x = FixedXD::Identity();                |x = Dynamic2D::Identity(rows, cols);       |N/A                                        |
 x.setIdentity();                        |x.setIdentity(rows, cols);                 |                                           |
                                         |                                           |                                           |
 Vector3f::UnitX() // 1 0 0              |                                           |VectorXf::Unit(size,i)                     |
 Vector3f::UnitY() // 0 1 0              |                                           |VectorXf::Unit(4,1) == Vector4f(0,1,0,0)   |
 Vector3f::UnitZ() // 0 0 1              |N/A                                        |                    == Vector4f::UnitY()   |
 ----------------------------------------+-------------------------------------------+-------------------------------------------- 

================================================================================
*eigen-mapping*
Mapping external arrays~


           |float data[] = {1,2,3,4};                                                                   
 Contiguous|Map<Vector3f> v1(data);       // uses v1 as a Vector3f object                               
 memory    |Map<ArrayXf>  v2(data,3);     // uses v2 as a ArrayXf object                                
           |Map<Array22f> m1(data);       // uses m1 as a Array22f object                               
           |Map<MatrixXf> m2(data,2,2);   // uses m2 as a MatrixXf object                               
           +-----------------------------------------------------------------------------------------------
           |float data[] = {1,2,3,4,5,6,7,8,9};                                                         
 Typical   |Map<VectorXf,0,InnerStride<2> >  v1(data,3);                      // = [1,3,5]              
 usage     |Map<VectorXf,0,InnerStride<> >   v2(data,3,InnerStride<>(3));     // = [1,4,7]              
 of strides|Map<MatrixXf,0,OuterStride<3> >  m2(data,2,3);                    // both lines     |1,4,7| 
           |Map<MatrixXf,0,OuterStride<> >   m1(data,2,3,OuterStride<>(3));   // are equal to:  |2,5,8| 

================================================================================
*eigen-arithmetic*
Arithmetic Operators~

  ------------+                              
 add          |mat3 = mat1 + mat2;           mat3 += mat1;                           
              |
 subtract     |mat3 = mat1 - mat2;           mat3 -= mat1;                           
              |
 scalar       |mat3 = mat1 * s1;             mat3 *= s1;           mat3 = s1 * mat1; 
              |
 product      |mat3 = mat1 / s1;             mat3 /= s1;                             
              |
 matrix/vector|col2 = mat1 * col1;                                                   
              |
 products _   |row2 = row1 * mat1;           row1 *= mat1;                           
              |mat3 = mat1 * mat2;           mat3 *= mat1;                           
              |
 transposition|mat1 = mat2.transpose();      mat1.transposeInPlace();                
 adjoint _    |mat1 = mat2.adjoint();        mat1.adjointInPlace();                  
              |
 dot product  |scalar = vec1.dot(vec2);                                              
              |
 inner product|scalar = col1.adjoint() * col2;                                       
 _            |scalar = (col1.adjoint() * col2).value();                             
              |
 outer product|mat = col1 * col2.transpose();                                        
 _            |
 norm         |scalar = vec1.norm();         scalar = vec1.squaredNorm()             
 normalization|vec2 = vec1.normalized();     vec1.normalize(); // inplace            
 _            |
 cross product|#include <Eigen/Geometry>                                             
 _            |vec3 = vec1.cross(vec2);                                              
              |
 
================================================================================
*eigen-cwise*
*eigen-array*
Coefficient-wise & Array operators~


 Coefficient-wise operators for matrices and vectors:
  
    Matrix API _            |Via Array conversions          
   -------------------------+------------------------------
    mat1.cwiseMin(mat2)     |mat1.array().min(mat2.array()) 
    mat1.cwiseMax(mat2)     |mat1.array().max(mat2.array()) 
    mat1.cwiseAbs2()        |mat1.array().abs2()            
    mat1.cwiseAbs()         |mat1.array().abs()             
    mat1.cwiseSqrt()        |mat1.array().sqrt()            
    mat1.cwiseProduct(mat2) |mat1.array() * mat2.array()    
    mat1.cwiseQuotient(mat2)|mat1.array() / mat2.array()    
                            
It is also very simple to apply any user defined function foo using
DenseBase::unaryExpr together with std::ptr_fun: >
                            
  mat1.unaryExpr(std::ptr_fun(foo))
                            
Array operators:_ 
                                                                                           
 Arithmetic |array1 * array2     array1 / array2     array1 *= array2    array1 /= array2  |
 operators  |array1 + scalar     array1 - scalar     array1 += scalar    array1 -= scalar  |
            +------------------------------------------------------------------------------+
            |array1 < array2     array1 > array2     array1 < scalar     array1 > scalar   |
 Comparisons|array1 <= array2    array1 >= array2    array1 <= scalar    array1 >= scalar  |
            |array1 == array2    array1 != array2    array1 == scalar    array1 != scalar  |
            +------------------------------------------------------------------------------+ 
            |array1.min(array2)                                                            |
            |array1.max(array2)                                                            |
            |array1.abs2()                                                                 |
            |array1.abs()                  std::abs(array1)                                |
            |array1.sqrt()                 std::sqrt(array1)                               |
 Trigo,     |array1.log()                  std::log(array1)                                |
 power, and |array1.exp()                  std::exp(array1)                                |
 misc       |array1.pow(exponent)          std::pow(array1,exponent)                       |
 functions  |array1.square()                                                               |
 and the STL|array1.cube()                                                                 |
 variants   |array1.inverse()                                                              |
            |array1.sin()                  std::sin(array1)                                |
            |array1.cos()                  std::cos(array1)                                |
            |array1.tan()                  std::tan(array1)                                |
            |array1.asin()                 std::asin(array1)                               |
            |array1.acos()                 std::acos(array1)                               |
            +------------------------------------------------------------------------------+
                            
================================================================================
*eigen-reductions*
Reductions~
                            
Eigen provides several reduction methods such as: minCoeff() , maxCoeff()
, sum() , prod() , trace() _, norm() _, squaredNorm() _, all() _,and any()
_. All reduction operations can be done matrix-wise, column-wise _ or
row-wise _. Usage example:               

   ------------+---------------------------+-------+
               |                           |       |
               | mat.minCoeff();           | 1     |
               +---------------------------+-------+
               | mat.colwise().minCoeff(); | 2 3 1 |
         5 3 1 +---------------------------+-------+
   mat = 2 7 8 |                           |1      |
         9 4 6 | mat.rowwise().minCoeff(); |2      |
               |                           |4      |
   ------------+---------------------------+-------+
                                            
Special versions of minCoeff and maxCoeff : >
                                            
 int i, j;                                  
 s = vector.minCoeff(&i);        // s == vector[i]
 s = matrix.maxCoeff(&i, &j);    // s == matrix(i,j)
                                            
Typical use cases of all() and any(): >
                                            
 if((array1 > 0).all()) ...      // if all coefficients of array1 are greater than 0 ...
 if((array1 < array2).any()) ... // if there exist a pair i,j such that array1(i,j) < array2(i,j) ...
                                            
                                            
================================================================================
*eigen-submatrices*
Sub-matrices~
                                            
Read-write access to a column or a row of a matrix (or array): >
                                            
 mat1.row(i) = mat2.col(j);                 
 mat1.col(j1).swap(mat1.col(j2));           
                                            
Read-write access to sub-vectors: 
                                            
 Default versions                  |Optimized versions when the size    |
                                   |is known at compile time            |
 ----------------------------------+------------------------------------+-------------
  vec1.head(n)                     | vec1.head<n>()                     |the first n 
                                   |                                    |coeffs      
  vec1.tail(n)                     | vec1.tail<n>()                     |the last n  
                                   |                                    |coeffs      
                                   |                                    |the n       
                                   |                                    |coeffs in   
  vec1.segment(pos,n)              | vec1.segment<n>(pos)               |the range   
                                   |                                    |[pos : pos  
                                   |                                    |+ n [       
 ----------------------------------+------------------------------------+---------
 Read-write access to sub-matrices:|                                    |
                                   |                                    |the rows x  
                                   |                                    |cols        
  mat1.block(i,j,rows,cols)        | mat1.block<rows,cols>(i,j)         |sub-matrix  
                                   |                                    |starting    
 (more)                            |(more)                              |from        
                                   |                                    |position    
                                   |                                    |(i,j)       
 ----------------------------------+------------------------------------+-----------
                                   |                                    |the rows x  
  mat1.topLeftCorner(rows,cols)    | mat1.topLeftCorner<rows,cols>()    |cols        
  mat1.topRightCorner(rows,cols)   | mat1.topRightCorner<rows,cols>()   |sub-matrix  
  mat1.bottomLeftCorner(rows,cols) | mat1.bottomLeftCorner<rows,cols>() |taken in    
  mat1.bottomRightCorner(rows,cols)| mat1.bottomRightCorner<rows,cols>()|one of the  
                                   |                                    |four        
                                   |                                    |corners     
 ----------------------------------+------------------------------------+-----------
                                   |                                    |specialized 
  mat1.topRows(rows)               | mat1.topRows<rows>()               |versions of 
  mat1.bottomRows(rows)            | mat1.bottomRows<rows>()            |block()     
  mat1.leftCols(cols)              | mat1.leftCols<cols>()              |when the    
  mat1.rightCols(cols)             | mat1.rightCols<cols>()             |block fit   
                                   |                                    |two corners 
                                   |
 
================================================================================
*eigen-misc*
Miscellaneous operations~
 
Reverse
 
Vectors, rows, and/or columns of a matrix can be reversed (see
DenseBase::reverse(), DenseBase::reverseInPlace(),
VectorwiseOp::reverse()).

 vec.reverse()           mat.colwise().reverse()   mat.rowwise().reverse()
 vec.reverseInPlace()
 
Replicate
 
Vectors, matrices, rows, and/or columns can be replicated in any direction
(see DenseBase::replicate(), VectorwiseOp::replicate())
 
 vec.replicate(times)                                          vec.replicate<Times>
 mat.replicate(vertical_times, horizontal_times)               mat.replicate<VerticalTimes, HorizontalTimes>()
 mat.colwise().replicate(vertical_times, horizontal_times)     mat.colwise().replicate<VerticalTimes, HorizontalTimes>()
 mat.rowwise().replicate(vertical_times, horizontal_times)     mat.rowwise().replicate<VerticalTimes, HorizontalTimes>()
 
 
================================================================================
*eigen-diag*
Diagonal, Triangular, and Self-adjoint matrices~
 
   (matrix world _)
 
Diagonal matrices


 Operation   |Code                                                                                
 ------------+  
 view a      |                                                                                    
 vector as a |mat1 = vec1.asDiagonal();
 diagonal    |
 matrix      |
 ------------+---------------------------------------------------------------------------------- 
 Declare a   |DiagonalMatrix<Scalar,SizeAtCompileTime> diag1(size);                               
 diagonal    |diag1.diagonal() = vector;                                                          
 matrix      |                                                                                  
 ------------+-----------------------------------------------------------------------------------
 Access the  |                                                                                    
 diagonal and|vec1 = mat1.diagonal();        mat1.diagonal() = vec1;      // main diagonal        
 super/sub   |vec1 = mat1.diagonal(+n);      mat1.diagonal(+n) = vec1;    // n-th super diagonal  
 diagonals of|vec1 = mat1.diagonal(-n);      mat1.diagonal(-n) = vec1;    // n-th sub diagonal    
 a matrix as |vec1 = mat1.diagonal<1>();     mat1.diagonal<1>() = vec1;   // first super diagonal 
 a vector    |vec1 = mat1.diagonal<-2>();    mat1.diagonal<-2>() = vec1;  // second sub diagonal 
 (read/write)|                                                                                   
 ------------+-----------------------------------------------------------------------------------
 Optimized   |mat3  = scalar * diag1 * mat1;                                                      
 products and|mat3 += scalar * mat1 * vec1.asDiagonal();                                          
 inverse     |mat3 = vec1.asDiagonal().inverse() * mat1                                           
             |mat3 = mat1 * diag1.inverse()                                                       
             |

================================================================================
*eigen-triangular*
  Triangular views~
             
TriangularView gives a view on a triangular part of a dense matrix and
allows to perform optimized operations on it. The opposite triangular part
is never referenced and can be used to store other information.
             
Operation     Code                                                                     
Reference to                                                                           
a triangular  m.triangularView<Xxx>()                                                  
with optional                                                                          
unit or null  Xxx = Upper, Lower, StrictlyUpper, StrictlyLower, UnitUpper, UnitLower
diagonal      
(read/write): 
Writing to a                                                                           
specific      
triangular    
part:         
(only the     m1.triangularView<Eigen::Lower>() = m2 + m3
referenced    
triangular    
part is       
evaluated)    
Conversion to                                                                          
a dense       
matrix        
setting the   m2 = m1.triangularView<Eigen::UnitUpper>()
opposite      
triangular    
part to zero: 
Products:     m3 += s1 * m1.adjoint().triangularView<Eigen::UnitUpper>() * m2          
              m3 -= s1 * m2.conjugate() * m1.adjoint().triangularView<Eigen::Lower>()  
Solving                                                                                
linear                                                                                 
equations:                                                                             
$ M_2 :=      
L_1^{-1} M_2  L1.triangularView<Eigen::UnitLower>().solveInPlace(M2)
$             L1.triangularView<Eigen::Lower>().adjoint().solveInPlace(M3)
$ M_3 :=      U1.triangularView<Eigen::Upper>().solveInPlace<OnTheRight>(M4)
{L_1^*}^{-1}  
M_3 $         
$ M_4 := M_4  
U_1^{-1} $    
             
================================================================================
*eigen-symmetric*
Symmetric/selfadjoint views~
             
Just as for triangular matrix, you can reference any triangular part of a
square matrix to see it as a selfadjoint matrix and perform special and
optimized operations. Again the opposite triangular part is never
referenced and can be used to store other information.
             
Operation        Code                                                             
Conversion to a  m2 = m.selfadjointView<Eigen::Lower>();                          
dense matrix:    
Product with                                                                      
another general  m3  = s1 * m1.conjugate().selfadjointView<Eigen::Upper>() * m3;  
matrix or        m3 -= s1 * m3.adjoint() * m1.selfadjointView<Eigen::Lower>();
vector:          
Rank 1 and rank                                                                   
K update:                                                                         
$ upper(M_1)     
\mathrel{{+}{=}} M1.selfadjointView<Eigen::Upper>().rankUpdate(M2,s1);
s_1 M_2^* M_2 $  m1.selfadjointView<Eigen::Lower>().rankUpdate(m2.adjoint(),-1);
$ lower(M_1)     
\mathbin{{-}{=}} 
M_2 M_2^* $      
Rank 2 update: (                                                                  
$ M              
\mathrel{{+}{=}} M.selfadjointView<Eigen::Upper>().rankUpdate(u,v,s);
s u v^* + s v    
u^* $)           
Solving linear   // via a standard Cholesky factorization                         
equations:       m2 = m1.selfadjointView<Eigen::Upper>().llt().solve(m2);         
( $ M_2 :=       // via a Cholesky factorization with pivoting                    
M_1^{-1} M_2 $)  m2 = m1.selfadjointView<Eigen::Lower>().ldlt().solve(m2);        

===============================================================================
vim:tw=78:ts=8:ft=help
