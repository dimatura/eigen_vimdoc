
*eigen-tut-block*
Tutorial page 4 - Block operations~

  • Previous: Tutorial page 3 - The Array class and coefficient-wise operations
  • Next: Tutorial page 5 - Advanced initialization

This tutorial page explains the essentials of block operations. A block is a
rectangular part of a matrix or array. Blocks expressions can be used both as
rvalues and as lvalues. As usual with Eigen expressions, this abstraction has
zero runtime cost provided that you let your compiler optimize.

Table of contents

  • Using block operations
  • Columns and rows
  • Corner-related operations
  • Block operations for vectors

Using block operations

The most general block operation in Eigen is called .block() . There are two
versions, whose syntax is as follows:

                                Version constructing a  Version constructing a
        Block operation           dynamic-size block       fixed-size block
                                      expression              expression
Block of size (p,q), starting   matrix.block(i,j,p,q);  matrix.block<p,q>(i,j);
at (i,j)

As always in Eigen, indices start at 0.

Both versions can be used on fixed-size and dynamic-size matrices and arrays.
These two expressions are semantically equivalent. The only difference is that
the fixed-size version will typically give you faster code if the block size is
small, but requires this size to be known at compile time.

The following program uses the dynamic-size and fixed-size versions to print
the values of several blocks inside a matrix.

                       Example:                              Output:
#include <Eigen/Dense>
#include <iostream>
                                                       Block in the middle
using namespace std;                                    6  7
                                                       10 11
int main()
{                                                      Block of size 1x1
  Eigen::MatrixXf m(4,4);                              1
  m <<  1, 2, 3, 4,
        5, 6, 7, 8,                                    Block of size 2x2
        9,10,11,12,                                    1 2
       13,14,15,16;                                    5 6
  cout << "Block in the middle" << endl;
  cout << m.block<2,2>(1,1) << endl << endl;           Block of size 3x3
  for (int i = 1; i <= 3; ++i)                          1  2  3
  {                                                     5  6  7
    cout << "Block of size " << i << "x" << i << endl;  9 10 11
    cout << m.block(0,0,i,i) << endl << endl;
  }
}

In the above example the .block() function was employed as a rvalue, i.e. it
was only read from. However, blocks can also be used as lvalues, meaning that
you can assign to a block.

This is illustrated in the following example. This example also demonstrates
blocks in arrays, which works exactly like the above-demonstrated blocks in
matrices.

                                                     Example:                                                                                        Output:
#include <Eigen/Dense>                                                                                              Here is the array a:
#include <iostream>                                                                                                 0.6 0.6 0.6 0.6
                                                                                                                    0.6 0.6 0.6 0.6
using namespace std;                                                                                                0.6 0.6 0.6 0.6
using namespace Eigen;                                                                                              0.6 0.6 0.6 0.6

int main()                                                                                                          Here is now a with m copied into its central 2x2 block:
{                                                                                                                   0.6 0.6 0.6 0.6
  Array22f m;                                                                                                       0.6   1   2 0.6
  m << 1,2,                                                                                                         0.6   3   4 0.6
       3,4;                                                                                                         0.6 0.6 0.6 0.6
  Array44f a = Array44f::Constant(0.6);
  cout << "Here is the array a:" << endl << a << endl << endl;                                                      Here is now a with bottom-right 2x3 block copied into top-left 2x2 block:
  a.block<2,2>(1,1) = m;                                                                                              3   4 0.6 0.6
  cout << "Here is now a with m copied into its central 2x2 block:" << endl << a << endl << endl;                   0.6 0.6 0.6 0.6
  a.block(0,0,2,3) = a.block(2,1,2,3);                                                                              0.6   3   4 0.6
  cout << "Here is now a with bottom-right 2x3 block copied into top-left 2x2 block:" << endl << a << endl << endl; 0.6 0.6 0.6 0.6
}

While the .block() method can be used for any block operation, there are other
methods for special cases, providing more specialized API and/or better
performance. On the topic of performance, all what matters is that you give
Eigen as much information as possible at compile time. For example, if your
block is a single whole column in a matrix, using the specialized .col() 
function described below lets Eigen know that, which can give it optimization
opportunities.

The rest of this page describes these specialized methods.

Columns and rows

Individual columns and rows are special cases of blocks. Eigen provides methods
to easily address them: .col() and .row().

Block operation      Method
i^th row *       matrix.row(i);

j^th column *    matrix.col(j);

The argument for col() and row() is the index of the column or row to be
accessed. As always in Eigen, indices start at 0.

                                          Example:                                                                              Output:
#include <Eigen/Dense>
#include <iostream>

using namespace std;
                                                                                             Here is the matrix m:
int main()                                                                                   1 2 3
{                                                                                            4 5 6
  Eigen::MatrixXf m(3,3);                                                                    7 8 9
  m << 1,2,3,                                                                                2nd Row: 4 5 6
       4,5,6,                                                                                After adding 3 times the first column into the third column, the matrix m is:
       7,8,9;                                                                                 1  2  6
  cout << "Here is the matrix m:" << endl << m << endl;                                       4  5 18
  cout << "2nd Row: " << m.row(1) << endl;                                                    7  8 30
  m.col(2) += 3 * m.col(0);
  cout << "After adding 3 times the first column into the third column, the matrix m is:\n";
  cout << m << endl;
}

That example also demonstrates that block expressions (here columns) can be
used in arithmetic like any other expression.

Corner-related operations

Eigen also provides special methods for blocks that are flushed against one of
the corners or sides of a matrix or array. For instance, .topLeftCorner() can
be used to refer to a block in the top-left corner of a matrix.

The different possibilities are summarized in the following table:

Block operation     Version constructing a          Version constructing a
                dynamic-size block expression    fixed-size block expression
Top-left p by q matrix.topLeftCorner(p,q);     matrix.topLeftCorner<p,q>();
block *
Bottom-left p   matrix.bottomLeftCorner(p,q);  matrix.bottomLeftCorner<p,q>();
by q block *
Top-right p by  matrix.topRightCorner(p,q);    matrix.topRightCorner<p,q>();
q block *
Bottom-right p  matrix.bottomRightCorner(p,q); matrix.bottomRightCorner<p,q>();
by q block *
Block           matrix.topRows(q);             matrix.topRows<q>();
containing the
first q rows *
Block           matrix.bottomRows(q);          matrix.bottomRows<q>();
containing the
last q rows *
Block
containing the  matrix.leftCols(p);            matrix.leftCols<p>();
first p columns
*
Block
containing the  matrix.rightCols(q);           matrix.rightCols<q>();
last q columns
*

Here is a simple example illustrating the use of the operations presented
above:

                                  Example:                                           Output:
#include <Eigen/Dense>
#include <iostream>                                                           m.leftCols(2) =
                                                                               1  2
using namespace std;                                                           5  6
                                                                               9 10
int main()                                                                    13 14
{
  Eigen::Matrix4f m;                                                          m.bottomRows<2>() =
  m << 1, 2, 3, 4,                                                             9 10 11 12
       5, 6, 7, 8,                                                            13 14 15 16
       9, 10,11,12,
       13,14,15,16;                                                           After assignment, m =
  cout << "m.leftCols(2) =" << endl << m.leftCols(2) << endl << endl;          8 12 16  4
  cout << "m.bottomRows<2>() =" << endl << m.bottomRows<2>() << endl << endl;  5  6  7  8
  m.topLeftCorner(1,3) = m.bottomRightCorner(3,1).transpose();                 9 10 11 12
  cout << "After assignment, m = " << endl << m << endl;                      13 14 15 16
}

Block operations for vectors

Eigen also provides a set of block operations designed specifically for the
special case of vectors and one-dimensional arrays:

                                     Version constructing Version constructing
          Block operation                     a                     a
                                      dynamic-size block    fixed-size block
                                          expression           expression
Block containing the first n         vector.head(n);      vector.head<n>();
elements *
Block containing the last n elements vector.tail(n);      vector.tail<n>();
*
Block containing n elements,         vector.segment(i,n); vector.segment<n>(i);
starting at position i *

An example is presented below:

                             Example:                                          Output:
                                                                   v.head(3) =
#include <Eigen/Dense>                                             1
#include <iostream>                                                2
                                                                   3
using namespace std;
                                                                   v.tail<3>() =
int main()                                                         4
{                                                                  5
  Eigen::ArrayXf v(6);                                             6
  v << 1, 2, 3, 4, 5, 6;
  cout << "v.head(3) =" << endl << v.head(3) << endl << endl;      after 'v.segment(1,4) *= 2', v =
  cout << "v.tail<3>() = " << endl << v.tail<3>() << endl << endl; 1
  v.segment(1,4) *= 2;                                             4
  cout << "after 'v.segment(1,4) *= 2', v =" << endl << v << endl; 6
}                                                                  8
                                                                   10
                                                                   6

  • Next: Tutorial page 5 - Advanced initialization

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Generated on Wed May 18 2011 06:54:42 for Eigen by  doxygen 1.7.1
vim:tw=78:ts=8:ft=help
