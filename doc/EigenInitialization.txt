
*eigen-tut-initialization*
Tutorial page 5 - Advanced initialization~

  • Previous: Tutorial page 4 - Block operations
  • Next: Tutorial page 6 - Linear algebra and decompositions

This page discusses several advanced methods for initializing matrices. It
gives more details on the comma-initializer, which was introduced before. It
also explains how to get special matrices such as the identity matrix and the
zero matrix.

Table of contents

  • The comma initializer
  • Special matrices and arrays
  • Usage as temporary objects

The comma initializer

Eigen offers a comma initializer syntax which allows the user to easily set all
the coefficients of a matrix, vector or array. Simply list the coefficients,
starting at the top-left corner and moving from left to right and from the top
to the bottom. The size of the object needs to be specified beforehand. If you
list too few or too many coefficients, Eigen will complain.

    Example:     Output:
Matrix3f m;
m << 1, 2, 3,    1 2 3
     4, 5, 6,    4 5 6
     7, 8, 9;    7 8 9
std::cout << m;

Moreover, the elements of the initialization list may themselves be vectors or
matrices. A common use is to join vectors or matrices together. For example,
here is how to join two row vectors together. Remember that you have to set the
size before you can use the comma initializer.

                    Example:                                Output:
RowVectorXd vec1(3);
vec1 << 1, 2, 3;
std::cout << "vec1 = " << vec1 << std::endl;

RowVectorXd vec2(4);                             vec1 = 1 2 3
vec2 << 1, 4, 9, 16;;                            vec2 =  1  4  9 16
std::cout << "vec2 = " << vec2 << std::endl;     joined =  1  2  3  1  4  9 16

RowVectorXd joined(7);
joined << vec1, vec2;
std::cout << "joined = " << joined << std::endl;

We can use the same technique to initialize matrices with a block structure.

              Example:                    Output:
MatrixXf matA(2, 2);                    1   2 0.1 0.2
matA << 1, 2, 3, 4;                     3   4 0.3 0.4
MatrixXf matB(4, 4);                  0.1 0.2   1   2
matB << matA, matA/10, matA/10, matA; 0.3 0.4   3   4
std::cout << matB << std::endl;

The comma initializer can also be used to fill block expressions such as m.row
(i). Here is a more complicated way to get the same result as in the first
example above:

                  Example:                   Output:
Matrix3f m;
m.row(0) << 1, 2, 3;                         1 2 3
m.block(1,0,2,2) << 4, 5, 7, 8;              4 5 6
m.col(2).tail(2) << 6, 9;                    7 8 9
std::cout << m;

Special matrices and arrays

The Matrix and Array classes have static methods like Zero(), which can be used
to initialize all coefficients to zero. There are three variants. The first
variant takes no arguments and can only be used for fixed-size objects. If you
want to initialize a dynamic-size object to zero, you need to specify the size.
Thus, the second variant requires one argument and can be used for
one-dimensional dynamic-size objects, while the third variant requires two
arguments and can be used for two-dimensional objects. All three variants are
illustrated in the following example:

                       Example:                                        Output:
std::cout << "A fixed-size array:\n";                   A fixed-size array:
Array33f a1 = Array33f::Zero();                         0 0 0
std::cout << a1 << "\n\n";                              0 0 0
                                                        0 0 0

std::cout << "A one-dimensional dynamic-size array:\n"; A one-dimensional dynamic-size array:
ArrayXf a2 = ArrayXf::Zero(3);                          0
std::cout << a2 << "\n\n";                              0
                                                        0

std::cout << "A two-dimensional dynamic-size array:\n"; A two-dimensional dynamic-size array:
ArrayXXf a3 = ArrayXXf::Zero(3, 4);                     0 0 0 0
std::cout << a3 << "\n";                                0 0 0 0
                                                        0 0 0 0

Similarly, the static method Constant(value) sets all coefficients to value. If
the size of the object needs to be specified, the additional arguments go
before the value argument, as in MatrixXd::Constant(rows, cols, value). The
method Random() fills the matrix or array with random coefficients. The
identity matrix can be obtained by calling Identity(); this method is only
available for Matrix, not for Array, because "identity matrix" is a linear
algebra concept. The method LinSpaced(size, low, high) is only available for
vectors and one-dimensional arrays; it yields a vector of the specified size
whose coefficients are equally spaced between low and high. The method
LinSpaced() is illustrated in the following example, which prints a table with
angles in degrees, the corresponding angle in radians, and their sine and
cosine.

                        Example:                                          Output:
                                                            Degrees   Radians      Sine    Cosine
                                                                  0         0         0         1
ArrayXXf table(10, 4);                                           10     0.175     0.174     0.985
table.col(0) = ArrayXf::LinSpaced(10, 0, 90);                    20     0.349     0.342      0.94
table.col(1) = M_PI / 180 * table.col(0);                        30     0.524       0.5     0.866
table.col(2) = table.col(1).sin();                               40     0.698     0.643     0.766
table.col(3) = table.col(1).cos();                               50     0.873     0.766     0.643
std::cout << "  Degrees   Radians      Sine    Cosine\n";        60      1.05     0.866       0.5
std::cout << table << std::endl;                                 70      1.22      0.94     0.342
                                                                 80       1.4     0.985     0.174
                                                                 90      1.57         1 -4.37e-08

This example shows that objects like the ones returned by LinSpaced() can be
assigned to variables (and expressions). Eigen defines utility functions like
setZero(), MatrixBase::setIdentity() and DenseBase::setLinSpaced() to do this
conveniently. The following example contrasts three ways to construct the
matrix $ J = \bigl[ \begin{smallmatrix} O & I \\ I & O \end{smallmatrix} \bigr]
$: using static methods and assignment, using static methods and the
comma-initializer, or using the setXxx() methods.

                                  Example:                                     Output:
const int size = 6;                                                          0 0 0 1 0 0
MatrixXd mat1(size, size);                                                   0 0 0 0 1 0
mat1.topLeftCorner(size/2, size/2)     = MatrixXd::Zero(size/2, size/2);     0 0 0 0 0 1
mat1.topRightCorner(size/2, size/2)    = MatrixXd::Identity(size/2, size/2); 1 0 0 0 0 0
mat1.bottomLeftCorner(size/2, size/2)  = MatrixXd::Identity(size/2, size/2); 0 1 0 0 0 0
mat1.bottomRightCorner(size/2, size/2) = MatrixXd::Zero(size/2, size/2);     0 0 1 0 0 0
std::cout << mat1 << std::endl << std::endl;
                                                                             0 0 0 1 0 0
MatrixXd mat2(size, size);                                                   0 0 0 0 1 0
mat2.topLeftCorner(size/2, size/2).setZero();                                0 0 0 0 0 1
mat2.topRightCorner(size/2, size/2).setIdentity();                           1 0 0 0 0 0
mat2.bottomLeftCorner(size/2, size/2).setIdentity();                         0 1 0 0 0 0
mat2.bottomRightCorner(size/2, size/2).setZero();                            0 0 1 0 0 0
std::cout << mat2 << std::endl << std::endl;
                                                                             0 0 0 1 0 0
MatrixXd mat3(size, size);                                                   0 0 0 0 1 0
mat3 << MatrixXd::Zero(size/2, size/2), MatrixXd::Identity(size/2, size/2),  0 0 0 0 0 1
        MatrixXd::Identity(size/2, size/2), MatrixXd::Zero(size/2, size/2);  1 0 0 0 0 0
std::cout << mat3 << std::endl;                                              0 1 0 0 0 0
                                                                             0 0 1 0 0 0

A summary of all pre-defined matrix, vector and array objects can be found in
the Quick reference guide.

Usage as temporary objects

As shown above, static methods as Zero() and Constant() can be used to
initialize variables at the time of declaration or at the right-hand side of an
assignment operator. You can think of these methods as returning a matrix or
array; in fact, they return so-called expression objects which evaluate to a
matrix or array when needed, so that this syntax does not incur any overhead.

These expressions can also be used as a temporary object. The second example in
the Getting started guide, which we reproduce here, already illustrates this.

                  Example:                       Output:
#include <iostream>
#include <Eigen/Dense>

using namespace Eigen;                        m =
using namespace std;                            94 89.8 43.5
                                              49.4  101 86.8
int main()                                    88.3 29.8 37.8
{                                             m * v =
  MatrixXf m = MatrixXf::Random(3,3);         404
  m = (m + MatrixXf::Constant(3,3,1.2)) * 50; 512
  cout << "m =" << endl << m << endl;         261
  VectorXf v(3);
  v << 1, 2, 3;
  cout << "m * v =" << endl << m * v << endl;
}

The expression m + MatrixXf::Constant(3,3,1.2) constructs the 3-by-3 matrix
expression with all its coefficients equal to 1.2 plus the corresponding
coefficient of m.

The comma-initializer, too, can also be used to construct temporary objects.
The following example constructs a random matrix of size 2-by-3, and then
multiplies this matrix on the left with $ \bigl[ \begin{smallmatrix} 0 & 1 \\ 1
& 0 \end{smallmatrix} \bigr] $.

                      Example:                              Output:
MatrixXf mat = MatrixXf::Random(2, 3);                  0.68  0.566  0.823
std::cout << mat << std::endl << std::endl;           -0.211  0.597 -0.605
mat = (MatrixXf(2,2) << 0, 1, 1, 0).finished() * mat;
std::cout << mat << std::endl;                        -0.211  0.597 -0.605
                                                        0.68  0.566  0.823

The finished() method is necessary here to get the actual matrix object once
the comma initialization of our temporary submatrix is done.

  • Next: Tutorial page 6 - Linear algebra and decompositions

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Generated on Wed May 18 2011 06:54:42 for Eigen by  doxygen 1.7.1
vim:tw=78:ts=8:ft=help
