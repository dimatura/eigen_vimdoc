
*eigen-quat*

  • Quaternion< _Scalar, _Options >

Public Types | Public Member Functions

Quaternion< _Scalar, _Options > Class Template Reference
[Geometry module]

The quaternion class used to represent 3D orientations and rotations. More...

Inherits Eigen::QuaternionBase< Quaternion< _Scalar, _Options > >.

List of all members.

Public Types

typedef _Scalar  Scalar
Public Member Functions

                 Quaternion (const Scalar *data)
template<typename Derived >
                 Quaternion (const MatrixBase< Derived > &other)
                 Quaternion (const AngleAxisType &aa)
                 Quaternion (Scalar w, Scalar x, Scalar y, Scalar z)
                 Quaternion ()
template<class Derived >
                 Quaternion (const QuaternionBase< Derived > &other)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Detailed Description

template<typename _Scalar, int _Options>
class Eigen::Quaternion< _Scalar, _Options >

The quaternion class used to represent 3D orientations and rotations.

This is defined in the Geometry module.

 #include <Eigen/Geometry>

Parameters:
     _Scalar  the scalar type, i.e., the type of the coefficients

This class represents a quaternion $ w+xi+yj+zk $ that is a convenient
representation of orientations and rotations of objects in three dimensions.
Compared to other representations like Euler angles or 3x3 matrices,
quatertions offer the following advantages:

  • compact storage (4 scalars)
  • efficient to compose (28 flops),
  • stable spherical interpolation

The following two typedefs are provided for convenience:

  • Quaternionf for float
  • Quaterniond for double

See also:
    class AngleAxis, class Transform

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Member Typedef Documentation

typedef _Scalar Scalar

the scalar type of the coefficients

Reimplemented from RotationBase< Derived, 3 >.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Constructor & Destructor Documentation

Quaternion  (   )  [inline]

Default constructor leaving the quaternion uninitialized.

Quaternion  ( Scalar  w,
              Scalar  x,
              Scalar  y,
              Scalar  z   
            )            [inline]

Constructs and initializes the quaternion $ w+xi+yj+zk $ from its four
coefficients w, x, y and z.

Warning:
    Note the order of the arguments: the real w coefficient first, while
    internally the coefficients are stored in the following order: [x, y, z, w]

Quaternion ( const Scalar *  data  )  [inline]

Constructs and initialize a quaternion from the array data

Quaternion ( const QuaternionBase< Derived > &  other  )  [inline]

Copy constructor

Quaternion ( const AngleAxisType &  aa  )  [inline, explicit]

Constructs and initializes a quaternion from the angle-axis aa

Quaternion ( const MatrixBase< Derived > &  other  )  [inline, explicit]

Constructs and initializes a quaternion from either:

  • a rotation matrix expression,
  • a 4D vector expression representing quaternion coefficients.

===============================================================================
vim:tw=78:ts=8:ft=help
